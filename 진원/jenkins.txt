1. 클라우드  > 저장소 연동
2. 컨테이너, msa (EKS)
3. 모니터링 (AWS CloudWatch 혹은 오픈소스)
4. ci/cd, devops (젠킨스, AWS코드파이프라인,깃허브) + (가능하다면 ANSIBLE, Teraform도 고려해봐야함)

dev(ansible) git > ci/cd >  앤서블  >  배포

#젠킨스 설치
sudo yum install java-11-amazon-corretto-devel -y
sudo wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
sudo yum clean packages
sudo yum install -y jenkins

#플러그인 설치전 필요 작업(플러그인 사용할 때 오류 방지) 아래 경로에 아래 옵션 추가
sudo vi /usr/lib/systemd/system/jenkins.service
JENKINS_JAVA_OPTIONS="-Djava.awt.headless=true -Dhttps.protocols=TLSv1.2"
sudo systemctl restart jenkins

#웹브라우저 접속
1. 보안그룹 8080/tcp 연결
2. 퍼블릭IP:8080 으로 접속
3. 변경이 필요할 경우 /usr/lib/systemd/system/jenkins.service 에서 변경하면됨 해당경로로 조회가 안된다면 systemctl status jenkins 후에 결과 긁어서 GPT한테 물어보면 설정파일 어딘지 알려줌


#깃허브 연동
1. 젠킨스관리 > 시스템관리 >Github에서 add github server 클릭
2. credentials 에서 add 클릭
3. kind에 secret text로 변경
4. ID에는 깃허브 ID, Secret에는 깃허브에서 발급받은 토큰 입력(깃허브 토큰 발행시 admin, admin:repo_hook 권한 필요

#플러그인 설치
1. GitHub Integration 플러그인 설치

#테라폼 설치
sudo yum install -y yum-utils shadow-utils
sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
sudo yum -y install terraform


###############배포###########################


# 프로젝트 생성 (사진참고)
1. 새로운 Item 클릭
2. 프로젝트 이름 입력, Freestyle project 선택 후 OK 클릭
3. Git 체크 후 레포지토리 URL 입력, Branch specifer를 깃허브의 브런치와 동일하게 변경, Credentials의 +Add 클릭
4. Username(깃허브 ID), Password(발급받은 토큰), ID(젠킨스상에서 표시할 이름) 입력 후 Add
5. 빌드유발 에서 GitHub hook trigger for GITScm polling 체크
6. 빌드환경 에서 Use secret text(s) or file(s) 체크, Add후 Secret text 2개 생성
7. Add 클릭
8. Kind를 Secret text로 변경, Secret에 Access key ID 혹은 Secret access key 입력(6번에서 생성한 2개 필드에 각각 넣어야함), ID에 젠킨스상에서 표시할 이름 입력
9. Valiable에 각각 AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY 입력 후 각 변수에 맞는 Credentials 선택
10. Build Steps 에서 아래의 "#쉘 명령어 > 테라폼으로 인프라 구성시" 명령어 복붙
11. 깃허브의 레지스토리에 tf파일 푸시 후 생성한 프로젝트에서 GitHu Hook Log 에 로그 출력되는지확인

#쉘 명령어 > 테라폼으로 인프라 구성시
terraform init
terraform plan
terraform apply -auto-approve

#쉘 명령어 > 테라폼으로 인프라 삭제시
terraform init
terraform plan -destroy
terraform destroy -auto-approve


#환경변수 이름 
AWS_ACCESS_KEY_ID
AWS_SECRET_ACCESS_KEY
