1. 클라우드  > 저장소 연동
2. 컨테이너, msa (EKS)
3. 모니터링 (AWS CloudWatch 혹은 오픈소스)
4. ci/cd, devops (젠킨스, AWS코드파이프라인,깃허브) + (가능하다면 ANSIBLE, Teraform도 고려해봐야함)

dev(테라폼 문서 작성) > github(테라폼 문서 push)  > 젠킨스(깃허브의 웹훅으로 이벤트 탐지) >  테라폼 실행  >  AWS인프라 배포

#######Yaml 사용시 "#웹브라우저 접속"부터 진행하면됨#######

#젠킨스 설치
sudo yum install java-11-amazon-corretto-devel -y
sudo wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
sudo yum clean packages
sudo yum install -y jenkins

#플러그인 설치전 필요 작업(플러그인 사용할 때 오류 방지) 아래 경로에 아래 옵션 추가
sudo vi /usr/lib/systemd/system/jenkins.service
JENKINS_JAVA_OPTIONS="-Djava.awt.headless=true -Dhttps.protocols=TLSv1.2"
sudo systemctl restart jenkins

#스왑 추가(2기가)
sudo mkdir /var/spool/swap
sudo touch /var/spool/swap/swapfile
sudo dd if=/dev/zero of=/var/spool/swap/swapfile count=2048000 bs=1024
sudo chmod 600 /var/spool/swap/swapfile
sudo mkswap /var/spool/swap/swapfile
sudo swapon /var/spool/swap/swapfile

#테라폼 설치
sudo yum install -y yum-utils shadow-utils
sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
sudo yum -y install terraform

#도커 설치 및 젠킨스 계정 권한 부여
sudo yum -y install docker
sudo systemctl enable --now docker
sudo usermod -aG docker jenkins

#웹브라우저 접속
1. 보안그룹 8080/tcp 연결
2. 퍼블릭IP:8080 으로 접속
3. 접속 포트 변경이 필요할 경우 /usr/lib/systemd/system/jenkins.service 에서 변경하면됨 해당경로로 조회가 안된다면 systemctl status jenkins 후에 결과 긁어서 GPT한테 물어보면 설정파일 어딘지 알려줌

#슬랙 연동
1. Slack 토큰 생성
Slack 에서 메시지 수신할 채널 생성
2. 앱추가 클릭
3. Jenkins CI 구성 클릭 후 생성한 채널 선택
4. Jenkins CI 앱 추가 하고 나오는 토큰 저장하기(jenkins에서 자격증명으로 사용해야함)

# 프로젝트 생성
1. 아래 플러그인 설치
2. 젠킨스 관리 클릭 > System 클릭 > credential add 클릭 > Username with password 변경 > Username에 깃허브 ID, Password에 깃허브 패스워드(토큰) 입력 후 저장
3. 젠킨스 관리 클릭 > System 클릭 > credential add 클릭 > aws credentials 변경 > id에 jenkins파일에서 입력한 자격증명이름 으로 변경(ex. aws_connection)  >  Access key ID와 Secret access key 입력 후 저장
4. 젠킨스 관리 클릭 > System 클릭 > Slack부분의 Workspace 입력 > credential add 클릭 >  Secret text로 변경 후 passwrod에 slack 토큰 입력 후 저장 > Credential에 방금 생성한 자격증명 정보 선택 후 Test > 성공 출력되면 저장
4. 새로운 Item 클릭 > 프로젝트 이름 입력 후 Pipeline 선택
5. Build Triggers 의 GitHub hook trigger for GITScm polling 체크
6. Pipeline 부분의 Definition을 Pipeline script from SCM로 변경
7. SCM을 Git으로 변경
8. 레포지토리 url 입력
9. Credentials 에는 2번에서 생성한 Git 자격증명으로 변경
10. Branches to build 에는 깃 레포지토리의 브런치로 변경 (ex. */main)

#jenkinsfile 수정
1. 커밋파일 백업할 s3버킷이름수정
2. 메시지보낼 slack 채널명 수정

# 플러그인 설치
1. GitHub Integration
2. AWS Credentials
3. S3 Publisher
4. Pipeline Utility Steps
5. Slack Notification



#################예전 버전 ###########################

# 프로젝트 생성 (사진참고 - jenkins구성 가이드)
1. 새로운 Item 클릭
2. 프로젝트 이름 입력, Freestyle project 선택 후 OK 클릭
3. Git 체크 후 레포지토리 URL 입력, Branch specifer를 깃허브의 브런치와 동일하게 변경, Credentials의 +Add 클릭
4. Username(깃허브 ID), Password(발급받은 토큰), ID(젠킨스상에서 표시할 이름) 입력 후 Add
5. 빌드유발 에서 GitHub hook trigger for GITScm polling 체크
6. 빌드환경 에서 Use secret text(s) or file(s) 체크, Add후 Secret text 2개 생성
7. Add 클릭
8. Kind를 Secret text로 변경, Secret에 Access key ID 혹은 Secret access key 입력(6번에서 생성한 2개 필드에 각각 넣어야함), ID에 젠킨스상에서 표시할 이름 입력
9. Valiable에 각각 AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY 입력 후 각 변수에 맞는 Credentials 선택
10. Build Steps 에서 아래의 "#쉘 명령어 > 테라폼으로 인프라 구성시" 명령어 복붙

#쉘 명령어 > 테라폼으로 인프라 구성시
terraform init
terraform plan
terraform apply -auto-approve

#쉘 명령어 > 테라폼으로 인프라 삭제시
terraform init
terraform plan -destroy
terraform destroy -auto-approve

#ec2 IAM 권한 추가
AmazonEC2ContainerRegistryFullAccess 추가
#도커로그인 테스트
aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ecr주소

#깃허브 연동
1. 코드 작업을 적용한 깃허브 레지스트리 접속
2. Settings > Webhooks > Add webhook
3. Payload URL에 http://젠킨스 IP:8080/github-webhook/
4. Content type을 application/json으로 변경
5. Which events would you like to trigger this webhook가 Just the push event로 체크되어있는지 확인
6. Add webhook 클릭후 새로고침 해서 v표시 되는지 확인

#환경변수 이름 
AWS_ACCESS_KEY_ID
AWS_SECRET_ACCESS_KEY
