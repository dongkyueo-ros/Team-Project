def isFileContentChanged(filePath) {
    def previousCommit = sh(script: "git rev-parse HEAD^", returnStdout: true).trim()
    def currentCommit = sh(script: "git rev-parse HEAD", returnStdout: true).trim()
    def diff = sh(script: "git diff ${previousCommit} ${currentCommit} -- ${filePath}", returnStdout: true)
    return diff != ''
}

def extractBaseImage(String dockerFilePath) {
    def dockerFileContent = readFile dockerFilePath
    def fromLine = dockerFileContent.split("\n").find { it.startsWith('FROM') }
    if (fromLine != null) {
        return fromLine.split(' ')[1].split(':')[0]
    } else {
        return null
    }
}

pipeline {
    agent any

    environment {
        DOCKER_CREDENTIALS = credentials('aws_connection')
    }

    stages {
        stage('Declarative: Checkout SCM') {
            steps {
                checkout scm
            }
        }

        stage('Check Changes') {
            steps {
                script {
                    def terraformChanged = isFileContentChanged('Terraform/**.tf')
                    def dockerChanged = isFileContentChanged('Image/*Dockerfile')

                    env.RUN_TERRAFORM = terraformChanged ? 'true' : 'false'
                    env.RUN_DOCKER = dockerChanged ? 'true' : 'false'

                    echo "Terraform Changed: ${env.RUN_TERRAFORM}"
                    echo "Docker Changed: ${env.RUN_DOCKER}"
                }
            }
        }

        stage('Terraform Apply') {
            when {
                expression { env.RUN_TERRAFORM == 'true' }
            }
            steps {
                script {
                    echo "Terraform code has changed. Applying..."
                    def terraformPath = sh(script: "find ${WORKSPACE}/Terraform -type f -name \"*.tf\" | head -n 1 || echo \"none\"", returnStdout: true).trim()

                    if (terraformPath != 'none') {
                        def terraformDir = terraformPath.replaceAll("/[^/]+\$", "")
                        dir(terraformDir) {
                            sh "terraform init"
                            sh "terraform plan -out=myplan"
                            sh "terraform apply myplan"
                        }
                    } else {
                        echo "No Terraform code found."
                    }
                }
            }
        }

        stage('Build and Push Docker Image') {
            when {
                expression { env.RUN_DOCKER == 'true' }
            }
            steps {
                script {
                    echo 'Building and pushing Docker image...'
                    def dockerWorkDir = "${WORKSPACE}/Image"
                    def buildNumber = env.BUILD_NUMBER
                    def dockerFilePath = "${dockerWorkDir}/Dockerfile"
                    def baseImage = extractBaseImage(dockerFilePath)

                    dir(dockerWorkDir) {
                        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws_connection', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                            sh "aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin 790267619968.dkr.ecr.ap-northeast-2.amazonaws.com"
                            sh "docker build -f ${dockerFilePath} -t my-image:${baseImage}-${buildNumber} ."
                            sh "docker tag my-image:${baseImage}-${buildNumber} 790267619968.dkr.ecr.ap-northeast-2.amazonaws.com/dockerimage:${baseImage}-${buildNumber}"
                            sh "docker push 790267619968.dkr.ecr.ap-northeast-2.amazonaws.com/dockerimage:${baseImage}-${buildNumber}"
                        }
                    }
                }
            }
        }
    }
}




// stage('Update Kubernetes Deployment') {
//     when {
//         expression { env.RUN_DOCKER == 'true' }
//     }
//     steps {
//         script {
//             def newImage = "790267619968.dkr.ecr.ap-northeast-2.amazonaws.com/dockerimage:${baseImage}-${buildNumber}"
//             sh "kubectl set image deployment/my-deployment my-container=${newImage}"
//         }
//     }
// }