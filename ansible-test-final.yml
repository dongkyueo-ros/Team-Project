- hosts: localhost
#프롬프트 앤서블 실행할때 패스워드 입력
  vars_prompt:
    - name: db_password
      prompt: "MariaDB 비밀번호를 입력하세요"
      private: yes  # 입력 내용을 숨김

  tasks:
#최신 ami 이미지 불러오기
    - name: Retrieve AMI information
      amazon.aws.ec2_ami_info:
        filters:
          name: "al2023-ami-2023*-kernel-6.1-x86_64"
          state: "available"
        region: ap-northeast-2  # 대상 AWS 리전
        owners: "amazon"  # AMI 소유자
      register: ami_info

    - name: Find the latest AMI
      set_fact:
        latest_ami_id: "{{ ami_info.images | sort(attribute='creation_date') | last | json_query('image_id') }}"
      when: ami_info.images | length > 0

#VPC 생성
    - name: Create VPC
      amazon.aws.ec2_vpc_net: # 변경된 모듈명
        name: MyVPC
        cidr_block: 10.0.0.0/16
        region: ap-northeast-2
        tags:
          Name: MyVPC
          Environment: Production
      register: vpc

#인터넷게이트웨이 생성 IGW
    - name: Create Internet Gateway
      amazon.aws.ec2_vpc_igw: # 변경된 모듈명
        vpc_id: "{{ vpc.vpc.id }}"
        region: ap-northeast-2
        tags:
          Name: MYIGW
          Environment: Production
      register: igw

# 퍼블릭서브넷 생성
    - name: Create Public Subnet
      amazon.aws.ec2_vpc_subnet: # 변경된 모듈명
        state: present
        vpc_id: "{{ vpc.vpc.id }}"
        cidr: 10.0.1.0/24
        map_public: yes
        region: ap-northeast-2
        az: ap-northeast-2a
        tags:
          Name: MyPublicSubnet
          Environment: Production
      register: subnet

#aws에 라우팅테이블 생성 여부 확인 없으면 1,2,3번 모두 스킵되고 생성됨
    - name: aws에 라우팅테이블 생성여부 확인
      amazon.aws.ec2_vpc_route_table_info:
        region: ap-northeast-2
      register: route_tables

    - name: MyPublicRT 라우팅 테이블 존재 여부 확인
      set_fact:
        route_table_exists: "{{ (route_tables.route_tables | json_query('[?tags.Name==`MyPublicRT`]') | length) > 0 }}"
      when: route_tables.route_tables is defined

    - name: MyPublicRT 라우팅 테이블 ID 가져오기
      set_fact:
        mypublicrt_id: "{{ route_tables.route_tables | json_query('[?tags.Name==`MyPublicRT`].route_table_id') | first }}"
      when: route_table_exists


# 라우팅 테이블 생성(위의 1,2,3번이 모두 스킵됐을때 실행)
    - name: Create route table MyPublicRT
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        state: present
        region: ap-northeast-2
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"
        tags:
          Name: MyPublicRT
          Environment: Production
        subnets: ["{{ subnet.subnet.id }}"]
      when: not (route_table_exists is defined and route_table_exists)
      register: route_table
    - name: Debug route table information
      debug:
        var: route_table


# #DB서브넷 생성
#     - name: DB서브넷 생성1
#       amazon.aws.ec2_vpc_subnet: # 변경된 모듈명
#         state: present
#         vpc_id: "{{ vpc.vpc.id }}"
#         cidr: 10.0.10.0/24
#         map_public: no
#         region: ap-northeast-2
#         az: ap-northeast-2a
#         tags:
#           Name: MyDBSubnet1
#           Environment: Production
#       register: dbsubnet1

# #DB서브넷 생성2
#     - name: DB서브넷 생성2
#       amazon.aws.ec2_vpc_subnet: # 변경된 모듈명
#         state: present
#         vpc_id: "{{ vpc.vpc.id }}"
#         cidr: 10.0.11.0/24
#         map_public: no
#         region: ap-northeast-2
#         az: ap-northeast-2c
#         tags:
#           Name: MyDBSubnet2
#           Environment: Production
#       register: dbsubnet2



# #DB서브넷그룹 생성
#     - name: DB 서브넷 그룹 생성
#       amazon.aws.rds_subnet_group:
#         state: present
#         name: my_subnet_group
#         description: My DB subnet group
#         region: ap-northeast-2  # 여기에 적절한 AWS 리전을 지정
#         tags:
#           Name: MyDBSubnetGroup
#           Environment: Production
#         subnets:
#           - "{{ dbsubnet1.subnet.id }}"
#           - "{{ dbsubnet2.subnet.id }}"

# #DB보안그룹 룰
#     - name: DB 보안 그룹 생성
#       amazon.aws.ec2_group:
#         name: my_db_security_group
#         description: Security group for RDS instance
#         vpc_id: "{{vpc.vpc.id}}"
#         rules:
#           - proto: tcp
#             from_port: 3306
#             to_port: 3306
#             cidr_ip: 0.0.0.0/0
#         region: ap-northeast-2
#         tags:
#           Name: MyDBSG
#           Environment: Production
#       register: DBSG

# #RDS 생성
#     - name: RDS 인스턴스 생성 (마리아DB)
#       amazon.aws.rds_instance:
#         engine: mariadb
#         db_instance_identifier: mydbinstance
#         allocated_storage: 20
#         db_instance_class: db.t2.micro
#         master_username: root
#         master_user_password: "{{ db_password }}"
#         db_subnet_group_name: "{{dbsubnet1.subnet.id}}"
#         vpc_security_group_ids:
#           - "{{ DBSG.group_id }}"
#         region: ap-northeast-2 
#         wait: yes
#         tags:
#           Name: MyRDS
#           Environment: Production
#       register: rds_instance

#보안그룹 생성
    - name: Create Security Group
      amazon.aws.ec2_group: # 변경된 모듈명
        name: my_security_group
        description: Security group for my VPC
        vpc_id: "{{ vpc.vpc.id }}"
        region: ap-northeast-2
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
        region: ap-northeast-2
        tags:
          Name: MYPublicSG
          Environment: Production
      register: security_group


#EC2 생성
    - name: Create EC2 Instance
      amazon.aws.ec2_instance: # 변경된 모듈명
        key_name: elb-public
        instance_type: t2.micro
        image_id: "{{ latest_ami_id }}"
#        image: ami-0ff1cd0b5d98708d1
        wait: yes
        security_groups: "{{ security_group.group_id }}"
        vpc_subnet_id: "{{ subnet.subnet.id }}"
        region: ap-northeast-2
        tags:
          Name: MyEC2
          Environment: Production
        user_data: |
          #!/bin/bash
          yum -y install httpd
          systemctl start httpd
          echo "{{latest_ami_id}}" > ~/testfile
          
          echo "{{ rds_instance.instance.endpoint }}" > ~/testfile
