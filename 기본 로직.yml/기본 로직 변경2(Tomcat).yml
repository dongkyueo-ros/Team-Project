Parameters:

# EC2 KeyPair 이름 지정
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances. Linked to AWS Parameter
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

# 인스턴스에 사용할 AMI ID
  LatestAmiId:
    Description: (DO NOT CHANGE)
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-minimal-kernel-default-x86_64
    AllowedValues:
      - /aws/service/ami-amazon-linux-latest/al2023-ami-minimal-kernel-default-x86_64

# RDS1 데이터베이스 마스터 사용자 비밀번호 
  DBPassword1:
    Description: RDS Master User Password for DB1
    Type: String
    MinLength: 8
    MaxLength: 20
    NoEcho: true
    AllowedPattern: '^[a-zA-Z0-9!@#$%^&*]*$'
    ConstraintDescription: Should contain at least one special character and only alphanumeric characters.

# RDS2 데이터베이스 마스터 사용자 비밀번호
  DBPassword2:
    Description: RDS Master User Password for DB2
    Type: String
    MinLength: 8
    MaxLength: 20
    NoEcho: true
    AllowedPattern: '^[a-zA-Z0-9!@#$%^&*]*$'
    ConstraintDescription: Should contain at least one special character and only alphanumeric characters.

# S3 버킷 이름 입력 (고유해야 한다)
  BucketName:
    Type: String
    Description: S3 Bucket name
    AllowedPattern: '^[a-zA-Z0-9-_]*$' # 알파벳, 대소문자, 숫자, -, _ 허용하도록 정의
    ConstraintDescription: Alphanumeric characters only

# ACM SSL/TLS 인증서
  CertificateArn:
    Type: String
    Description: ACM SSL Certificate ARN # ACM SSL/TLS 인증서 ARN
# CloudFront는 현재 us-east-1 (버지니아 북부) 리전의 ACM에서 생성된 SSL/TLS 인증서를 사용

# ALB 도메인 이름 입력
  DomainNameALB:
    Type: String
    Description: ALB Domain name

# CloudFront 도메인 이름 입력
  DomainNameCloudFront:
    Type: String
    Description: CloudFront Domain name

# 대체 도메인 이름 (CNAME)
  DomainNameCNAME:
    Type: String
    Description: CloudFront Alternate Domain name (CNAME)

# Route 53에서 호스팅 중인 영역 ID로 변경
  HostedZoneIdParameter:
    Type: String
    Description: AWS Route 53 Hosted Zone ID

Resources:

# S3 버킷 생성
  MyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Name
          Value: MyS3Bucket

# 새 OAI 생성
  MyLegacyAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: My Legacy Access Identity

# CloudFront 배포 생성
  MyCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt MyS3Bucket.DomainName
            Id: !Ref MyS3Bucket
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${MyLegacyAccessIdentity}  
              # CloudFront 원본 액세스 ID(OAI)를 사용하여 S3 버킷에 액세스
        Enabled: true
        DefaultCacheBehavior:
          TargetOriginId: !Ref MyS3Bucket
          ForwardedValues:
            QueryString: false
          ViewerProtocolPolicy: redirect-to-https
          DefaultTTL: 86400
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6  
          # CachingOptimized 캐시 정책 ID
          #OriginRequestPolicyId: a1e4b5c6-1bf9-4a17-8e0a-4a08a5b0d508  
          # CachingOptimized 원본 요청 정책 ID
        DefaultRootObject: index.html  # 기본 루트 객체 설정
        ViewerCertificate: 
          AcmCertificateArn: !Ref CertificateArn
          SslSupportMethod: sni-only
           # ACM(SSL/TLS) 증명서 아이디 사용하는 내용
        HttpVersion: http2
        Aliases:
          - !Ref DomainNameCNAME  # 대체 도메인 이름 (CNAME) 추가
        Comment: CloudFront Distribution for MyS3Bucket

# S3 버킷 정책
  MyS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MyS3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              CanonicalUser: !GetAtt MyLegacyAccessIdentity.S3CanonicalUserId
            Action: s3:GetObject
            Resource: !Sub arn:aws:s3:::${MyS3Bucket}/*

# IAM 역할 생성
  SSMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SSMRole  # IAM 역할 설정
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: ec2.amazonaws.com
      Policies:  # IAM 정책 설정
        - PolicyName: SSMParameterReadPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: ssm:GetParameter
                Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/MyApp/RDS/Endpoint
# arn:aws:ssm:[해당 리전]:[AWS 계정 ID]:parameter/MyApp/RDS/Endpoint

# IAM 인스턴스 프로필
  SSMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref SSMRole

# VPC 생성
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: My-VPC

# 인터넷 게이트웨이 생성
  MyIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: My-IGW

# 인터넷 게이트웨이 연결
  MyIGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyIGW

# Public 라우팅 테이블 생성 (Bastion Host)
  PublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: Public-RT

# Public 라우터 연결 (Bastion Host)
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRT
      DestinationCidrBlock: 0.0.0.0/0 # 모든 트래픽이 아닌 필요한 경우만 허용하게 변경
      GatewayId: !Ref MyIGW

# Private 라우팅 테이블 생성 (Front-End)
  FEPrivateRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: Front-End-Private-RT

# Private 라우터 연결 (Front-End)
  FEDefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref FEPrivateRT
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGW

# Private 라우팅 테이블 생성 (Back-End)
  BEPrivateRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: Back-End-Private-RT

# Private 라우터 연결 (Back-End)
  BEDefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref BEPrivateRT
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGW

# 탄력적 IP 생성
  NatEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: MyVPC
      Tags:
        - Key: Name
          Value: NAT-EIP

# NAT 게이트웨이 생성
  NATGW:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP.AllocationId
      SubnetId: !Ref PublicSN1
      Tags:
        - Key: Name
          Value: NAT-GW

# Public 서브넷 생성 (Bastion Host)
  PublicSN1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: ap-northeast-2a
      Tags:
        - Key: Name
          Value: Public-SN-1

# Public 서브넷 생성 (Bastion Host)
  PublicSN2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: ap-northeast-2c
      Tags:
        - Key: Name
          Value: Public-SN-2

# Private 서브넷 생성 (Front-End)
  FEPrivateSN1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: ap-northeast-2a
      Tags:
        - Key: Name
          Value: Front-End-Private-SN-1

# Private 서브넷 생성 (Front-End)
  FEPrivateSN2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: ap-northeast-2c
      Tags:
        - Key: Name
          Value: Front-End-Private-SN-2

# Private 서브넷 생성 (Back-End)
  BEPrivateSN1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: ap-northeast-2a
      Tags:
        - Key: Name
          Value: Back-End-Private-SN-1

# Private 서브넷 생성 (Back-End)
  BEPrivateSN2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.5.0/24
      AvailabilityZone: ap-northeast-2c
      Tags:
        - Key: Name
          Value: Back-End-Private-SN-2

# DBPrivate 서브넷 생성 (DB)
  DBPrivateSN1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.6.0/24
      AvailabilityZone: ap-northeast-2a
      Tags:
        - Key: Name
          Value: DB-Private-SN-1

# DBPrivate 서브넷 생성 (DB)
  DBPrivateSN2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.7.0/24
      AvailabilityZone: ap-northeast-2c
      Tags:
        - Key: Name
          Value: DB-Private-SN-2

# Public 라우팅 테이블 서브넷 연결
  PublicSNRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRT
      SubnetId: !Ref PublicSN1

# Public 라우팅 테이블 서브넷 연결
  PublicSNRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRT
      SubnetId: !Ref PublicSN2

# Private 라우팅 테이블 서브넷 연결 (Front-End)
  FEPrivateSNRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref FEPrivateRT
      SubnetId: !Ref FEPrivateSN1

# Private 라우팅 테이블 서브넷 연결 (Front-End)
  FEPrivateSNRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref FEPrivateRT
      SubnetId: !Ref FEPrivateSN2

# Private 라우팅 테이블 서브넷 연결 (Back-End)
  BEPrivateSNRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref BEPrivateRT
      SubnetId: !Ref BEPrivateSN1

# Private 라우팅 테이블 서브넷 연결 (Back-End)
  BEPrivateSNRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref BEPrivateRT
      SubnetId: !Ref BEPrivateSN2

# Public 보안 그룹 생성 (Bastion Host) | SSH 대상 0.0.0.0/0(특정 관리자의 IP 주소로 주는게 좋음)
  PublicSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: Public-SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

# ALB 보안 그룹 생성 (External) | HTTP 대상 0.0.0.0/0
  ExALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: External ALB Security Group
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: External-ALB-SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

# Private 보안 그룹 생성 (Front-End) | SSH 대상 Public-SG, ExALB-SG
  FEPrivateSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Front-End Private Security Group
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt ExALBSG.GroupId
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !GetAtt PublicSG.GroupId
      Tags:
        - Key: Name
          Value: Front-End-Private-SG

# ALB 보안 그룹 생성 (Internal) | HTTP 대상 0.0.0.0/0
  InALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Internal ALB Security Group
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: Internal-ALB-SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !GetAtt FEPrivateSG.GroupId

# Private 보안 그룹 생성 (Back-End) | SSH 대상 Public-SG, InALB-SG / (보안 그룹 구성 생각)
  BEPrivateSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Back-End Private Security Group
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !GetAtt InALBSG.GroupId
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !GetAtt PublicSG.GroupId # Public Bastion Host 에서 바로 접속 가능
      Tags:
        - Key: Name
          Value: Back-End-Private-SG

# DBPrivate 보안 그룹 생성 | MySQL 대상 Public-SG, Private-SG
  DBPrivateSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group to allow connections to aws-rds-1 from ELB
      GroupName: DB-Private-SG
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref BEPrivateSG
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref PublicSG
      Tags:
        - Key: Name
          Value: DB-Private-SG

# DB 서브넷 그룹 생성
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet Group for MariaDB RDS
      DBSubnetGroupName: DBSubnetGroup
      SubnetIds:
        - !Ref DBPrivateSN1
        - !Ref DBPrivateSN2

# RDS1 생성 (Master)
  RDS1:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: aws-rds-1
      DBName: AWS_RDS_1
      DBInstanceClass: db.t3.micro
      Engine: mariadb
      EngineVersion: 10.6.14
      MasterUsername: root
      MasterUserPassword: !Ref DBPassword1
      AllocatedStorage: 8
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref DBPrivateSG
      PubliclyAccessible: false
      AvailabilityZone: ap-northeast-2a

# RDS2 생성 (Slave)
  RDS2:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: aws-rds-2
      DBName: AWS_RDS_2
      DBInstanceClass: db.t3.micro
      Engine: mariadb
      EngineVersion: 10.6.14
      MasterUsername: root
      MasterUserPassword: !Ref DBPassword2
      AllocatedStorage: 8
      VPCSecurityGroups:
        - !Ref DBPrivateSG
      PubliclyAccessible: false
      AvailabilityZone: ap-northeast-2c
      SourceDBInstanceIdentifier: !Ref RDS1

# RDS Endpoint SSM 저장
  RDSEndpoint:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /MyApp/RDS/Endpoint
      Type: String
      Value: !GetAtt RDS1.Endpoint.Address

# Public Auto Scaling 그룹 시작 구성 리소스
  LaunchConfigPub:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      InstanceType: t2.micro
      ImageId: !Ref LatestAmiId
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref PublicSG
      AssociatePublicIpAddress: true
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            hostnamectl set-hostname "Pub-EC2-$(hostname -I)"
            yum update -y

# Private Auto Scaling 그룹 시작 구성 리소스 (Front-End)
  FELaunchConfigPri:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      InstanceType: t2.micro
      ImageId: !Ref LatestAmiId
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref FEPrivateSG
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            hostnamectl set-hostname "Front-End-Pri-EC2-$(hostname -I)"
            yum -y update
            yum -y install httpd mod_ssl
            yum -y install wget unzip amazon-ssm-agent
            systemctl enable --now httpd
            systemctl enable --now amazon-ssm-agent

# Private Auto Scaling 그룹 시작 구성 리소스 (Back-End)
  BELaunchConfigPri:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      InstanceType: t2.micro
      ImageId: !Ref LatestAmiId
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref SSMInstanceProfile
      SecurityGroups:
        - !Ref BEPrivateSG
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            hostnamectl set-hostname "Back-End-Pri-EC2-$(hostname -I)"
            yum -y update
            yum -y install httpd php php-mysqli
            yum -y install java 1.8.0 openjdk.x86_64
            yum -y install wget unzip amazon-ssm-agent
            yum -y install mariadb*
            systemctl enable --now httpd
            systemctl enable --now mariadb
            systemctl enable --now amazon-ssm-agent

# ALB(Application Load Balancer) 생성 (External)
  ExALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: External-ALB
      Scheme: internet-facing
      Type: application
      SecurityGroups:
        - !Ref ExALBSG  # ALB-SG
      Subnets:
        - !Ref PublicSN1
        - !Ref PublicSN2
      Tags:
        - Key: Name
          Value: External-ALB

# ALB 대상 그룹 생성 (External)
  ExALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: External-ALB-TG
      Port: 80
      Protocol: HTTP
      VpcId: !Ref MyVPC
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: 301

# ALB 리스너 생성 (External)
  ExALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ExALBTargetGroup
      LoadBalancerArn: !Ref ExALB
      Port: 80
      Protocol: HTTP

# ALB(Application Load Balancer) 생성 (Internal)
  InALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: Internal-ALB
      Scheme: internal
      Type: application
      SecurityGroups:
        - !Ref InALBSG  # ALB-SG
      Subnets:
        - !Ref PublicSN1
        - !Ref PublicSN2
      Tags:
        - Key: Name
          Value: Internal-ALB

# ALB 대상 그룹 생성 (Internal)
  InALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: Internal-ALB-TG
      Port: 80
      Protocol: HTTP
      VpcId: !Ref MyVPC
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: 301

# ALB 리스너 생성 (Internal)
  InALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref InALBTargetGroup
      LoadBalancerArn: !Ref InALB
      Port: 80
      Protocol: HTTP

# Public Auto Scaling 그룹 생성
  AutoScalingGroupPub:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: Pub-ASG
      VPCZoneIdentifier:
        - !Ref PublicSN1
        - !Ref PublicSN2
      LaunchConfigurationName: !Ref LaunchConfigPub
      MinSize: 2
      MaxSize: 3
      DesiredCapacity: 2
      Tags:
        - Key: Name
          Value: Public-EC2-ASG
          PropagateAtLaunch: true
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300

# Private Auto Scaling 그룹 생성 (Front-End)
  FEAutoScalingGroupPri:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: Front-End-Pri-ASG
      VPCZoneIdentifier:
        - !Ref FEPrivateSN1
        - !Ref FEPrivateSN2
      LaunchConfigurationName: !Ref FELaunchConfigPri
      MinSize: 2
      MaxSize: 4
      DesiredCapacity: 2
      TargetGroupARNs:
        - !Ref ExALBTargetGroup
      Tags:
        - Key: Name
          Value: Front-End-Pri-EC2-ASG
          PropagateAtLaunch: true
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300

# Private Auto Scaling 그룹 생성 (Back-End)
  BEAutoScalingGroupPri:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: Back-End-Pri-ASG
      VPCZoneIdentifier:
        - !Ref BEPrivateSN1
        - !Ref BEPrivateSN2
      LaunchConfigurationName: !Ref BELaunchConfigPri
      MinSize: 2
      MaxSize: 4
      DesiredCapacity: 2
      TargetGroupARNs:
        - !Ref InALBTargetGroup
      Tags:
        - Key: Name
          Value: Back-End-Pri-EC2-ASG
          PropagateAtLaunch: true
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300

# Public Auto Scaling 정책 설정
  ScaleUpPolicyPub:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroupPub
      Cooldown: 300
      ScalingAdjustment: 1

  ScaleDownPolicyPub:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroupPub
      Cooldown: 300
      ScalingAdjustment: -1

# Private Auto Scaling 정책 설정 (Front-End)
  FEScaleUpPolicyPri:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref FEAutoScalingGroupPri
      Cooldown: 300
      ScalingAdjustment: 1

  FEScaleDownPolicyPri:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref FEAutoScalingGroupPri
      Cooldown: 300
      ScalingAdjustment: -1

# Private Auto Scaling 정책 설정 (Back-End)
  BEScaleUpPolicyPri:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref BEAutoScalingGroupPri
      Cooldown: 300
      ScalingAdjustment: 1

  BEScaleDownPolicyPri:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref BEAutoScalingGroupPri
      Cooldown: 300
      ScalingAdjustment: -1

# Route 53 레코드 생성 ALB 연결
  Route53RecordSetALB:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneIdParameter # Route 53에서 호스팅 중인 영역 ID로 변경
      Name: !Ref DomainNameALB  # 원하는 도메인 이름으로 변경
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt ExALB.CanonicalHostedZoneID
        DNSName: !GetAtt ExALB.DNSName

# CloudFront Route53 레코드 생성
  CloudFrontRoute53Record:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneIdParameter # Route 53에서 호스팅 중인 영역 ID로 변경
      Name: !Ref DomainNameCloudFront  # 원하는 도메인 이름으로 변경
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2  # CloudFront DNS의 고정 Hosted Zone ID
        DNSName: !GetAtt MyCloudFrontDistribution.DomainName